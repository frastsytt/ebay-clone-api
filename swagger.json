{
  "openapi": "3.0.1",
  "info": {
      "title": "Shelter API",
      "version": "1.0.6",
      "description": "This is the documentation for my shelter project.",
      "contact": {
          "name": "Roomet SÃ¼tt",
          "url": "https://github.com/frastsytt/shelter",
          "email": "roomet.sutt@voco.ee"
      },
      "license": {
          "name": "GNU AGPLv3",
          "url": "https://www.gnu.org/licenses/agpl.txt"
      }
  },
  "servers": [
      {
          "url": "https://localhost:443/"
      }
  ],
  "paths": {
      "/createJWT": {
          "post": {
              "requestBody": {
                  "description": "Username and password combination to try and log in with.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/loginCredentials"
                          }
                      }
                  },
                  "required": true
              },
              "tags": [
                  "/authentication"
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/JWTTOKEN"
                              },
                              "example": {
                                  "JWTTOKEN": "asd7sdfg8sg7f89gh5",
                                  "isAdmin": true
                              }
                          }
                      },
                      "description": "If the username & password are legit, returns a JWT token."
                  },
                  "400": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/error"
                              },
                              "example": {
                                  "error": "Bad request, some of the request parameters are missing."
                              }
                          }
                      },
                      "description": "The response when the request body format is not correct."
                  },
                  "401": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/error"
                              },
                              "example": {
                                  "error": "Wrong username or password"
                              }
                          }
                      },
                      "description": "When either the username or password doesn't match."
                  }
              },
              "operationId": "authentication",
              "summary": "Authenticate to the server.",
              "description": "Checks that the supplied username & password are a matching pair and returns a generated JWT token if they are.",
              "x-codegen-request-body-name": "body"
          }
      },
      "/logs": {
          "get": {
              "tags": [
                  "/logs"
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/logs"
                              },
                              "example": [
                                  {
                                      "date": "2023-03-07T09:50:22.931Z",
                                      "method": "POST",
                                      "protocol": "https",
                                      "url": "/auth/google/callback",
                                      "eventdata": "",
                                      "remoteaddress": "::1",
                                      "content": "{\"clientId\":\"589975274851-iablj17qj6j9a8a6fqvotgvsd623aodp.apps.googleusercontent.com\",\"client_id\":\"589975274851-iablj17qj6j9a8a6fqvotgvsd623aodp.apps.googleusercontent.com\",\"credential\":\"eyJhbGciOiJSUzI1NiIsImtpZCI6IjI1NWNjYTZlYzI4MTA2MDJkODBiZWM4OWU0NTZjNDQ5NWQ3NDE4YmIiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJuYmYiOjE2NzgxODIzMTgsImF1ZCI6IjU4OTk3NTI3NDg1MS1pYWJsajE3cWo2ajlhOGE2ZnF2b3RndnNkNjIzYW9kcC5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwOTA0MDgzMDExMzk2MjAzMTQ5MSIsImhkIjoidm9jby5lZSIsImVtYWlsIjoicm9vbWV0LnN1dHRAdm9jby5lZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhenAiOiI1ODk5NzUyNzQ4NTEtaWFibGoxN3FqNmo5YThhNmZxdm90Z3ZzZDYyM2FvZHAuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJuYW1lIjoiUm9vbWV0IFPDvHR0IiwicGljdHVyZSI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hL0FHTm15eFlpM3VxT3ZNUVJQRHpkbmFZbWR0RW41b2UwSF91Y1dZc3VJaVA1PXM5Ni1jIiwiZ2l2ZW5fbmFtZSI6IlJvb21ldCIsImZhbWlseV9uYW1lIjoiU8O8dHQiLCJpYXQiOjE2NzgxODI2MTgsImV4cCI6MTY3ODE4NjIxOCwianRpIjoiZDJkY2U3MTQ2YWY4MzM3NzE0YjJhNDk3NGZjYzg4MTE0MDkyMzZjZCJ9.E0THl0WIKF6FKYVd-UP0iOAL5PO0ovug4fWWtomJFWNk-fGORgEwRN_xHkoo103C3hQVqKZbmHvB39-O4FcFTYbxf5CiKBzxbDXT8jfGbEns96xFE-1AIjEOFW-YQ9swx3aATgPUkzThUvw_ClP5cDoMbs5tqETsPQnRcjxpzDIXBd0IqmKfwlpwgxgUhvlMyaSrLJKLjZb9lT8cVULqQL0TE3WTwe1egFwETdrch9uWjCg-chyixk-Gs3LnE4xYr-H52BWt4Uq459-8T1sPdGbeJFowFCWYfLvg8bOjVE0u5dRuRp5JZR26YTqIlLRKSNyVYn-fJdp67ldlb5P3xg\",\"select_by\":\"user\"}"
                                  },
                                  {
                                      "date": "2023-03-07T09:50:22.931Z",
                                      "method": "POST",
                                      "protocol": "https",
                                      "url": "/auth/google/callback",
                                      "eventdata": "",
                                      "remoteaddress": "::1",
                                      "content": "{\"clientId\":\"589975274851-iablj17qj6j9a8a6fqvotgvsd623aodp.apps.googleusercontent.com\",\"client_id\":\"589975274851-iablj17qj6j9a8a6fqvotgvsd623aodp.apps.googleusercontent.com\",\"credential\":\"eyJhbGciOiJSUzI1NiIsImtpZCI6IjI1NWNjYTZlYzI4MTA2MDJkODBiZWM4OWU0NTZjNDQ5NWQ3NDE4YmIiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJuYmYiOjE2NzgxODIzMTgsImF1ZCI6IjU4OTk3NTI3NDg1MS1pYWJsajE3cWo2ajlhOGE2ZnF2b3RndnNkNjIzYW9kcC5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwOTA0MDgzMDExMzk2MjAzMTQ5MSIsImhkIjoidm9jby5lZSIsImVtYWlsIjoicm9vbWV0LnN1dHRAdm9jby5lZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhenAiOiI1ODk5NzUyNzQ4NTEtaWFibGoxN3FqNmo5YThhNmZxdm90Z3ZzZDYyM2FvZHAuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJuYW1lIjoiUm9vbWV0IFPDvHR0IiwicGljdHVyZSI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hL0FHTm15eFlpM3VxT3ZNUVJQRHpkbmFZbWR0RW41b2UwSF91Y1dZc3VJaVA1PXM5Ni1jIiwiZ2l2ZW5fbmFtZSI6IlJvb21ldCIsImZhbWlseV9uYW1lIjoiU8O8dHQiLCJpYXQiOjE2NzgxODI2MTgsImV4cCI6MTY3ODE4NjIxOCwianRpIjoiZDJkY2U3MTQ2YWY4MzM3NzE0YjJhNDk3NGZjYzg4MTE0MDkyMzZjZCJ9.E0THl0WIKF6FKYVd-UP0iOAL5PO0ovug4fWWtomJFWNk-fGORgEwRN_xHkoo103C3hQVqKZbmHvB39-O4FcFTYbxf5CiKBzxbDXT8jfGbEns96xFE-1AIjEOFW-YQ9swx3aATgPUkzThUvw_ClP5cDoMbs5tqETsPQnRcjxpzDIXBd0IqmKfwlpwgxgUhvlMyaSrLJKLjZb9lT8cVULqQL0TE3WTwe1egFwETdrch9uWjCg-chyixk-Gs3LnE4xYr-H52BWt4Uq459-8T1sPdGbeJFowFCWYfLvg8bOjVE0u5dRuRp5JZR26YTqIlLRKSNyVYn-fJdp67ldlb5P3xg\",\"select_by\":\"user\"}"
                                  }
                              ]
                          }
                      },
                      "description": "Logs from the server as an array of objects. One object equals to one line/request that there is in the log."
                  },
                  "401": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/error"
                              },
                              "example": {
                                  "error": "Unauthorized!"
                              }
                          }
                      },
                      "description": "The JWT token is either invalid or outdated."
                  }
              },
              "security": [
                  {
                      "JWTTOKEN": []
                  }
              ],
              "operationId": "logs",
              "summary": "Get server logs.",
              "description": "The logs saved in the \"eventlog.log\" file returned as a JSON object."
          }
      },
      "/auth/google/callback": {
          "post": {
              "requestBody": {
                  "description": "The response from Googles oauth2 services.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/oAuth"
                          }
                      }
                  },
                  "required": true
              },
              "tags": [
                  "/authentication"
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/JWTTOKEN"
                              },
                              "example": {
                                  "JWTTOKEN": "sdfg345sfgd5443sdfg",
                                  "isAdmin": true
                              }
                          }
                      },
                      "description": "Successful authentication."
                  },
                  "401": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/error"
                              },
                              "example": {
                                  "error": "Google authentication unsuccessful"
                              }
                          }
                      },
                      "description": "The supplied credentials were wrong and the user will not be authenticated."
                  }
              },
              "operationId": "google auth",
              "summary": "Google oauth callback.",
              "description": "The endpoint that the Google oauth service communicates with when a client tries to log in with their e-mail account.",
              "x-codegen-request-body-name": "body"
          }
      },
      "/reservedpets": {
          "get": {
              "tags": [
                  "/petmanagement"
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/pets"
                              },
                              "example": [
                                  {
                                      "id": 93,
                                      "name": "some text",
                                      "sex": "some text",
                                      "species": "some text",
                                      "img": "some text",
                                      "bookedBy": "some text"
                                  },
                                  {
                                      "id": 30,
                                      "name": "some text",
                                      "sex": "some text",
                                      "species": "some text",
                                      "img": "some text",
                                      "bookedBy": "some text"
                                  }
                              ]
                          }
                      },
                      "description": "The user authenticates successfully and gets all reserved pets as a response."
                  },
                  "401": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/error"
                              },
                              "example": {
                                  "error": "Can not authenticate!"
                              }
                          }
                      },
                      "description": "When the server can not authenticate the user.\n"
                  }
              },
              "security": [
                  {
                      "JWTTOKEN": []
                  }
              ],
              "operationId": "reserved pets",
              "summary": "Get pets that are reserved.",
              "description": "Gets all the pets and filters them down to objects that don't have an empty bookedby value."
          }
      },
      "/pets": {
          "summary": "Reserve a pet",
          "description": "Create an entirely new pet object.",
          "post": {
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/newPet"
                          },
                          "examples": {
                              "newPet": {
                                  "value": {
                                      "name": "some text",
                                      "sex": "some text",
                                      "species": "some text",
                                      "img": "some text"
                                  }
                              }
                          }
                      }
                  },
                  "required": true
              },
              "tags": [
                  "/petmanagement"
              ],
              "responses": {
                  "200": {
                      "description": "Successful creation of new pet."
                  },
                  "400": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/error"
                              },
                              "examples": {
                                  "error": {
                                      "value": {
                                          "error": "some text"
                                      }
                                  }
                              }
                          }
                      },
                      "description": "Some of the request body fields are unparseable."
                  },
                  "401": {
                      "$ref": "#/components/responses/wrongJWT"
                  }
              },
              "deprecated": false,
              "security": [
                  {
                      "JWTTOKEN": []
                  }
              ],
              "operationId": "pets",
              "summary": "Create an entirely new pet object."
          }
      },
      "/pets/available/": {
          "get": {
              "tags": [
                  "/petmanagement"
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/pets"
                              },
                              "example": [
                                  {
                                      "id": 57,
                                      "name": "some text",
                                      "sex": "some text",
                                      "species": "some text",
                                      "img": "some text",
                                      "bookedBy": "some text"
                                  },
                                  {
                                      "id": 65,
                                      "name": "some text",
                                      "sex": "some text",
                                      "species": "some text",
                                      "img": "some text",
                                      "bookedBy": "some text"
                                  }
                              ]
                          }
                      },
                      "description": "Returns the pets that are not yet reserved. Anyone can request these."
                  }
              },
              "operationId": "available pets",
              "summary": "Get available pets",
              "description": "Return all the pets that dont have a user tied to it.\n"
          }
      },
      "/reservepet": {
          "patch": {
              "tags": [
                  "/petmanagement"
              ],
              "responses": {
                  "200": {
                      "description": "Return 200 on a successful pet reservation."
                  },
                  "401": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/error"
                              },
                              "example": {
                                  "error": "Can not authenticate!"
                              }
                          }
                      },
                      "description": "1. There is no JWT token supplied.\n2. The JWT token is expired.\n3. The JWT token is invalid."
                  }
              },
              "security": [
                  {
                      "JWTTOKEN": []
                  }
              ],
              "operationId": "reserve a pet",
              "summary": "Reserve a pet",
              "description": "Change the bookedby value of a pet to the logged in user."
          }
      },
      "/refreshCredentials": {
          "get": {
              "tags": [
                  "/authentication"
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/userstatus"
                              },
                              "example": {
                                  "username": "some text",
                                  "isAdmin": true
                              }
                          }
                      },
                      "description": "Return the username and admin status of the user."
                  },
                  "401": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/error"
                              },
                              "example": {
                                  "error": "Can not authenticate!"
                              }
                          }
                      },
                      "description": "1. There is no JWT token supplied.\n2. The JWT token is expired.\n3. The JWT token is invalid."
                  }
              },
              "security": [
                  {
                      "JWTTOKEN": []
                  }
              ],
              "operationId": "refresh credentials",
              "summary": "Refresh credentials.",
              "description": "Matches the JWT token to the user.\nAlso return that users admin status."
          }
      },
      "/register": {
          "post": {
              "requestBody": {
                  "description": "The username and password that the user is trying to register.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/loginCredentials"
                          }
                      },
                      "multipart/form-data": {
                          "schema": {
                              "$ref": "#/components/schemas/loginCredentials"
                          }
                      }
                  },
                  "required": true
              },
              "tags": [
                  "/authentication"
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/JWTTOKEN"
                              },
                              "example": {
                                  "JWTTOKEN": "some text",
                                  "isAdmin": true
                              }
                          }
                      },
                      "description": "The user has successfully been created. And gets JWT token for that user."
                  },
                  "400": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/error"
                              },
                              "example": {
                                  "error": "A user with that username already exists"
                              }
                          }
                      },
                      "description": "The username already exists."
                  }
              },
              "operationId": "register",
              "summary": "Register a new user",
              "description": "Attempt to create a new user.",
              "x-codegen-request-body-name": "body"
          }
      },
      "/pets/{id}": {
          "delete": {
              "tags": [
                  "/petmanagement"
              ],
              "parameters": [
                  {
                      "name": "id",
                      "description": "The pet id that will be deleted.",
                      "schema": {
                          "type": "integer"
                      },
                      "in": "path",
                      "required": true
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The pet has been successfully deleted server-side."
                  },
                  "401": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/error"
                              },
                              "example": {
                                  "error": "Can not authenticate!"
                              }
                          }
                      },
                      "description": "The person trying to delete a pet can not be authenticated.\n"
                  },
                  "404": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/error"
                              },
                              "example": {
                                  "error": "Pet was not found!"
                              }
                          }
                      },
                      "description": "The pet that has been requested to be deleted is not found."
                  }
              },
              "security": [
                  {
                      "JWTTOKEN": []
                  }
              ],
              "operationId": "delete pet",
              "summary": "Delete a pet",
              "description": "Delets a pet by its ID.\n"
          }
      },
      "/pets/edit/{id}": {
          "patch": {
              "tags": [
                  "/petmanagement"
              ],
              "parameters": [
                  {
                      "name": "id",
                      "description": "The pet ID that will be edited.",
                      "schema": {
                          "type": "integer"
                      },
                      "in": "path",
                      "required": true
                  }
              ],
              "responses": {
                  "200": {
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/individualPet"
                              },
                              "example": {
                                  "id": 89,
                                  "name": "some text",
                                  "sex": "some text",
                                  "species": "some text",
                                  "img": "some text",
                                  "bookedBy": "some text"
                              }
                          }
                      },
                      "description": "Upon a successful patch the response will contain the new values of the pet that was requested to be modified."
                  }
              },
              "security": [
                  {
                      "JWTTOKEN": []
                  }
              ],
              "operationId": "edit pet",
              "summary": "Edit pet by ID",
              "description": "Overwrite existing pet values through this endpoint by supplying the entire individual pet as an object and it's ID as a query parameter."
          }
      }
  },
  "components": {
      "schemas": {
          "logs": {
              "title": "Root Type for logs",
              "description": "This is the data that gets logged server side for every action.",
              "type": "object",
              "properties": {
                  "date": {
                      "format": "date-time",
                      "type": "string"
                  },
                  "method": {
                      "type": "string"
                  },
                  "protocol": {
                      "type": "string"
                  },
                  "url": {
                      "type": "string"
                  },
                  "eventdata": {
                      "type": "string"
                  },
                  "remoteaddress": {
                      "type": "string"
                  },
                  "content": {
                      "type": "string"
                  }
              },
              "example": {
                  "date": "2023-03-07T11:17:21.058Z",
                  "method": "GET",
                  "protocol": "https",
                  "url": "/logs",
                  "eventdata": "Roomet",
                  "remoteaddress": "::1",
                  "content": "{}"
              }
          },
          "individualPet": {
              "title": "Root Type for individualPet",
              "description": "A singular pet object.",
              "type": "object",
              "properties": {
                  "id": {
                      "format": "int32",
                      "type": "integer"
                  },
                  "name": {
                      "type": "string"
                  },
                  "sex": {
                      "type": "string"
                  },
                  "species": {
                      "type": "string"
                  },
                  "img": {
                      "type": "string"
                  },
                  "bookedBy": {
                      "type": "string"
                  }
              },
              "example": {
                  "id": 1,
                  "name": "Nurr",
                  "sex": "male",
                  "species": "cat",
                  "img": "https://localhost:443/img/cat-1.jpg",
                  "bookedBy": "Jesus Christ"
              }
          },
          "error": {
              "title": "Root Type for error",
              "description": "A error message that gets sent when something goes wrong server-side.",
              "type": "object",
              "properties": {
                  "error": {
                      "type": "string"
                  }
              },
              "example": {
                  "error": "Invalid id"
              }
          },
          "JWTTOKEN": {
              "title": "Root Type for JWTTOKEN",
              "description": "JSON Object with a valid json web token and the users admin status.",
              "type": "object",
              "properties": {
                  "JWTTOKEN": {
                      "type": "string"
                  },
                  "isAdmin": {
                      "type": "boolean"
                  }
              },
              "example": {
                  "JWTTOKEN": "345546dfghghdfs67gsd67",
                  "isAdmin": true
              }
          },
          "loginCredentials": {
              "title": "Root Type for loginCredentials",
              "description": "The credentials to attempt a log in that the client sends.",
              "type": "object",
              "properties": {
                  "username": {
                      "type": "string"
                  },
                  "password": {
                      "type": "string"
                  }
              },
              "example": {
                  "username": "Admin",
                  "password": "Password"
              }
          },
          "oAuth": {
              "title": "Root Type for oAuth",
              "description": "The oauth request that Google sends to our callback.",
              "type": "object",
              "properties": {
                  "clientId": {
                      "type": "string"
                  },
                  "client_id": {
                      "type": "string"
                  },
                  "credential": {
                      "type": "string"
                  },
                  "select_by": {
                      "type": "string"
                  }
              },
              "example": {
                  "clientId": "589975274851-iablj17qj6j9a8a6fqvotgvsd623aodp.apps.googleusercontent.com",
                  "client_id": "589975274851-iablj17qj6j9a8a6fqvotgvsd623aodp.apps.googleusercontent.com",
                  "credential": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjI1NWNjYTZlYzI4MTA2MDJkODBiZWM4OWU0NTZjNDQ5NWQ3NDE4YmIiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJuYmYiOjE2NzgxOTAwNTMsImF1ZCI6IjU4OTk3NTI3NDg1MS1pYWJsajE3cWo2ajlhOGE2ZnF2b3RndnNkNjIzYW9kcC5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwOTA0MDgzMDExMzk2MjAzMTQ5MSIsImhkIjoidm9jby5lZSIsImVtYWlsIjoicm9vbWV0LnN1dHRAdm9jby5lZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhenAiOiI1ODk5NzUyNzQ4NTEtaWFibGoxN3FqNmo5YThhNmZxdm90Z3ZzZDYyM2FvZHAuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJuYW1lIjoiUm9vbWV0IFPDvHR0IiwicGljdHVyZSI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hL0FHTm15eFlpM3VxT3ZNUVJQRHpkbmFZbWR0RW41b2UwSF91Y1dZc3VJaVA1PXM5Ni1jIiwiZ2l2ZW5fbmFtZSI6IlJvb21ldCIsImZhbWlseV9uYW1lIjoiU8O8dHQiLCJpYXQiOjE2NzgxOTAzNTMsImV4cCI6MTY3ODE5Mzk1MywianRpIjoiMTdmMTIxMDc5MDJkMzM3ODU4YjZlMzI5OTRjZTFiNmE5ZjQ0MWYzYSJ9.H4T4FC0Xy02aGbPQ2tVM1h6QjRuGNSKs2OdNC6YR7wLJcRkJ5DVBBKvBZpSbn4h0XN53gTDjpWOvuximW82sbmB8tjrp5huisA3RYnO-vZA0kFj6oUkRQm8D8Iv7tmEf0_9icRpgWK4NQbrlU_-Tm3OlaJ9W2YgsNZil-9mAqrBNDKFiPbglGoEOYVs-RnEk_yiZBeO27-l6dIHcQlCx5DQkufzn_u9xBKZyVJZMozXr8VNWiCQYjCmx283A_Zy9CrDgYjECwK3EFZXE3v2utxmTkuttReIZKCiXmbF1ULiJLxLl6dZL026dDyBQzXDHYSHHlxjwdchkP8TUIpO12Q",
                  "select_by": "btn"
              }
          },
          "pets": {
              "title": "Root Type for reservedPets",
              "description": "Array of pets that have a user associated with them. Bookedby field must not be empty.",
              "type": "array",
              "items": {
                  "type": "object",
                  "properties": {
                      "id": {
                          "format": "int32",
                          "type": "integer"
                      },
                      "name": {
                          "type": "string"
                      },
                      "sex": {
                          "type": "string"
                      },
                      "species": {
                          "type": "string"
                      },
                      "img": {
                          "type": "string"
                      },
                      "bookedBy": {
                          "type": "string"
                      }
                  }
              },
              "example": [
                  {
                      "id": 1,
                      "name": "Nurr",
                      "sex": "male",
                      "species": "cat",
                      "img": "https://localhost:443/img/cat-1.jpg",
                      "bookedBy": "roomet.sutt@voco.ee"
                  },
                  {
                      "id": 2,
                      "name": "Bella",
                      "sex": "female",
                      "species": "cat",
                      "img": "https://localhost:443/img/cat-2.jpg",
                      "bookedBy": "roomet.sutt@voco.ee"
                  }
              ]
          },
          "userstatus": {
              "title": "Root Type for userstatus",
              "description": "The username and admin status of the user.",
              "type": "object",
              "properties": {
                  "username": {
                      "type": "string"
                  },
                  "isAdmin": {
                      "type": "boolean"
                  }
              },
              "example": {
                  "username": "Roomet",
                  "isAdmin": true
              }
          },
          "newPet": {
              "title": "Root Type for newPet",
              "description": "The new pet to be added",
              "type": "object",
              "properties": {
                  "name": {
                      "type": "string"
                  },
                  "sex": {
                      "type": "string"
                  },
                  "species": {
                      "type": "string"
                  },
                  "img": {
                      "type": "string"
                  }
              },
              "example": {
                  "name": "Peeter",
                  "sex": "male",
                  "species": "fish",
                  "img": "https://localhost/img/fishdefault.png"
              }
          }
      },
      "responses": {
          "wrongJWT": {
              "content": {
                  "application/json": {
                      "schema": {
                          "$ref": "#/components/schemas/error"
                      },
                      "example": {
                          "error": "Can not authenticate!"
                      }
                  }
              },
              "description": "1. There is no JWT token supplied.\n2. The JWT token is expired.\n3. The JWT token is invalid."
          }
      },
      "securitySchemes": {
          "JWTTOKEN": {
              "scheme": "bearer",
              "type": "http",
              "description": "The JWT token issued by the server upon a successful login."
          }
      }
  }
}